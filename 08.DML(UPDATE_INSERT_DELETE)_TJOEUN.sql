/*
  - DML (DATA MANIPULATION LANGUAGE): 데이터 조작 언어
    : 테이블에 값을 삽입(INSERT)하거나, 수정(UPDATE), 삭제(DELETE)하는 구문
*/
--======================================================================
/*
  - INSERT
    : 테이블에 새로운 ROW를 추가하는 구문
    
  [FORMAT]
    INSERT INTO [TABLE_NAME] VALUES (VAL1, VAL2, VAL3...);
      > 모든 컬럼의 값을 직접 입력
        컬럼의 순서를 지켜서 값을 입력해줘야함
        값의 개수가 부족하면 NOT ENOUGH VALUE 오류
        값의 개수가 많으면 TOO MANY VALUES
*/
INSERT INTO EMPLOYEE_COPY VALUES(300, '김정보', '971122-1231412', 'slapstic@gmail.com', '01011112222', 'D6', 'J4', 3240000, 0.13, 200, SYSDATE, NULL, DEFAULT);

-- 특정 컬럼을 지정해서 삽입
INSERT INTO EMPLOYEE_COPY(EMP_ID, EMP_NAME, EMP_NO, JOB_CODE, HIRE_DATE, PHONE) 
  VALUES (301, '이정보', '011223-4123123', DEFAULT, DEFAULT, '01011423345');
  
INSERT INTO EMPLOYEE_COPY(EMP_ID, EMP_NAME, EMP_NO, HIRE_DATE, PHONE) 
  VALUES (302, '이정보', '011223-4123123', DEFAULT, '01011423345');
  
INSERT INTO EMPLOYEE_COPY(EMP_ID, EMP_NAME, HIRE_DATE, PHONE) 
  VALUES (303, '이정보', '011223-4123123', '01011423345');
  -- EMP_NO의 NULL 오류
  
INSERT 
  INTO EMPLOYEE_COPY
    (
        EMP_ID
      , EMP_NAME
      , EMP_NO
      , JOB_CODE
      , HIRE_DATE
      , PHONE
    ) 
  VALUES 
    (
        301
      , '이정보'
      , '011223-4123123'
      , DEFAULT
      , DEFAULT
      , '01011423345'
    );
    
---------------------------------------------------------
/*
  - SUBQUERY를 사용한 INSERT
    INSERT INTO [TABLE_NAME] (SUBQUERY)
*/
CREATE TABLE EMP_01(
  EMP_ID VARCHAR2(3),
  EMP_NAME VARCHAR2(20),
  DEPT_NAME CHAR(2)
);

INSERT INTO EMP_01 (SELECT EMP_ID, EMP_NAME, D.DEPT_TITLE
                    FROM EMPLOYEE E, DEPARTMENT D
                    WHERE E.DEPT_CODE = D.DEPT_ID(+));
-- TRUNCATE TABLE EMP_01;
SELECT * FROM EMP_01;

-----------------------------------------------------------------------------------------
/*
  - INSERT ALL
    2개 이상의 테이블에 INSERT 할 때 사용하는 서브쿼리가 동일할 경우
    
    [FORMAT]
      INSERT ALL
      INTO [TABLE_NAME_1] VALUES(COLUMN1, ...)
      INTO [TABLE_NAME_2] VALUES(COLUMN1, ...)
        (SUB QUERY)
*/
CREATE TABLE EMP_DEPT
AS SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE
    FROM EMPLOYEE
    WHERE 1=0;
    
CREATE TABLE EMP_MANAGER
AS SELECT EMP_ID, EMP_NAME, MANAGER_ID
    FROM EMPLOYEE
    WHERE 1=0;
    
SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE, MANAGER_ID
FROM EMPLOYEE
WHERE DEPT_CODE = 'D1';

INSERT ALL
  INTO EMP_DEPT VALUES(EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE)
  INTO EMP_MANAGER VALUES(EMP_ID, EMP_NAME, MANAGER_ID)
    SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE, MANAGER_ID
    FROM EMPLOYEE
    WHERE DEPT_CODE = 'D1';

SELECT * FROM EMP_DEPT;
SELECT * FROM EMP_MANAGER;
-----------------------------------------------------------------------------------------
/*
  - 조건을 사용하는 INSERT ALL
    
    [FORMAT]
      INSERT ALL
      WHEN [CASE1] THEN
        INTO [TABLE_NAME_1] VALUES(COLUMN1, ...)
      WHEN [CASE2] THEN
        INTO [TABLE_NAME_2] VALUES(COLUMN1, ...)
      (SUB QUERY)
*/
CREATE TABLE BEFORE_2000
AS SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY
    FROM EMPLOYEE
    WHERE 1=0;
    
CREATE TABLE AFTER_2000
AS SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY
    FROM EMPLOYEE
    WHERE 1=0;

INSERT ALL
  WHEN HIRE_DATE < TO_DATE('00/01/01', 'RR/MM/DD') THEN
    INTO BEFORE_2000 VALUES(EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
  ELSE
    INTO AFTER_2000 VALUES(EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
  SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY
    FROM EMPLOYEE;

SELECT * FROM BEFORE_2000;
SELECT * FROM AFTER_2000;


--======================================================================
/*
  - UPDATE
    : 테이블의 데이터를 수정하는 구문
    
  [FORMAT]
    UPDATE [TABLE_NAME] 
    SET [COLUMN_NAME] = [TO_VALUE]
    WHERE [SET_AREA];
      >> 주의 : WHERE절 생략하면 모든 행의 데이터가 변경됨
*/
-- DEPARTMENT 복사본 테이블 생성
CREATE TABLE DEPT_COPY
AS SELECT * FROM DEPARTMENT;

UPDATE DEPT_COPY
SET DEPT_TITLE = 'HAHA';
SELECT * FROM DEPT_COPY;
ROLLBACK;

TRUNCATE TABLE DEPT_COPY;
DROP TABLE DEPT_COPY;

UPDATE DEPT_COPY
SET DEPT_TITLE = '전략기획부'
WHERE DEPT_ID = 'D9';
SELECT * FROM DEPT_COPY;

-- EMPLOYEE_COPY 테이블에서 왕정보의 급여를 1,500,000 으로 인상
UPDATE EMPLOYEE_COPY
SET SALARY = 1500000
WHERE EMP_NAME = '왕정보';
SELECT * FROM EMPLOYEE_COPY WHERE EMP_NAME = '왕정보';

-- EMPLOYEE_COPY 테이블에서 왕정보의 급여를 1,500,000 으로 인상, BONUS 10%으로 변경
UPDATE EMPLOYEE_COPY
SET SALARY = 1800000
  , BONUS = 0.1
WHERE EMP_NAME = '구정하';
SELECT * FROM EMPLOYEE_COPY WHERE EMP_NAME = '구정하';

UPDATE EMPLOYEE_COPY
SET BONUS = NVL(BONUS * 1.1, NULL);
SELECT BONUS FROM EMPLOYEE_COPY;

UPDATE EMPLOYEE_COPY
SET SALARY = SALARY * 1.1;
SELECT SALARY FROM EMPLOYEE_COPY;

-----------------------------------------------------------------------------------------
/*
  - 서브쿼리를 사용한 UPDATE
    
    [FORMAT]
      UPDATE [TABLE_NAME]
      SET [COLUMN_NAME] = (SUBQUERY)
      [WHERE]
*/
UPDATE EMPLOYEE_COPY
SET SALARY = (SELECT SALARY FROM EMPLOYEE_COPY WHERE EMP_NAME = '전정보')
  , BONUS = (SELECT BONUS FROM EMPLOYEE_COPY WHERE EMP_NAME = '전정보')
WHERE EMP_NAME = '이정보';

-- 다중열 서브쿼리도 가능
UPDATE EMPLOYEE_COPY
SET (SALARY, BONUS) = (SELECT SALARY, BONUS FROM EMPLOYEE_COPY WHERE EMP_NAME = '전정보')
WHERE EMP_NAME = '김정보';

-- 왕정보, 구정하, 선정보, 전지연, 장정보의 급여와 보너스를 오정보와 같게 업데이트
UPDATE EMPLOYEE_COPY
SET (SALARY, BONUS) = (SELECT SALARY, BONUS 
                        FROM EMPLOYEE_COPY 
                        WHERE EMP_NAME = '오정보')
WHERE EMP_NAME IN ('왕정보', '구정하', '선정보', '전지연', '장정보');

SELECT * FROM EMPLOYEE_COPY;

-- ASIA 지역에서 근무하는 사원들의 보너스값을 0.3으로 변경
UPDATE EMPLOYEE_COPY
SET BONUS = 0.3
WHERE EMP_ID IN (
  SELECT EMP_ID 
  FROM EMPLOYEE_COPY E, DEPARTMENT D, LOCATION L
  WHERE E.DEPT_CODE = D.DEPT_ID(+)
    AND D.LOCATION_ID = L.LOCAL_CODE(+)
    AND L.LOCAL_NAME LIKE 'ASIA%');
SELECT * FROM EMPLOYEE_COPY;

-- UPDATE시에도 제약조건에 위배되선 안됨
-- 왕정보의 DEPT_CODE를 D10으로 변경
UPDATE EMPLOYEE_COPY
SET DEPT_CODE = 'D0'
WHERE EMP_NAME = '왕정보';

UPDATE EMPLOYEE_COPY
SET JOB_CODE = NULL
WHERE EMP_NAME = '왕정보';


-----------------------------------------------------------------------------------------
/*
  - DELETE
    : 테이블의 데이터를 한 행 단위로 삭제
    
  [FORMAT]
    DELETE FROM [TABLE_NAME]
    [WHERE]
      >> 주의 : 조건이 없으면 모든 데이터를 삭제함
*/
DELETE FROM EMPLOYEE_COPY
WHERE EMP_NAME = '왕정보';

DELETE FROM EMPLOYEE_COPY
WHERE DEPT_CODE IS NULL;

ROLLBACK;
SELECT * FROM EMPLOYEE_COPY;

-- TRUNCATE : 테이블의 전체 행을 삭제
TRUNCATE TABLE EMPLOYEE_COPY4;
DROP TABLE EMPLOYEE_COPY4;
ROLLBACK;
